var Engine;
(function (Engine) {
    var Config = (function () {
        function Config() {
        }
        Config.calculateOffset = function () {
            this.offsetX = (Engine.Config.gameScreenX / 2) - (Engine.Config.tileWidth / 2);
            this.offsetY = Engine.Config.tileHeight;
        };
        Config.gameScreenX = 1024;
        Config.gameScreenY = 768;
        Config.tileWidth = 100;
        Config.tileHeight = 50;
        Config.tileTextureWidth = 100;
        Config.tileTextureHeight = 100;
        return Config;
    })();
    Engine.Config = Config;
})(Engine || (Engine = {}));
//# sourceMappingURL=Config.js.map
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Engine;
(function (Engine) {
    var GameMapStatic = (function (_super) {
        __extends(GameMapStatic, _super);
        function GameMapStatic() {
            _super.apply(this, arguments);
        }
        GameMapStatic.prototype.loadMap = function (mapConfig) {
            this.addChild(new Engine.Map(mapConfig));
        };
        return GameMapStatic;
    })(PIXI.DisplayObjectContainer);
    Engine.GameMap = new GameMapStatic();
})(Engine || (Engine = {}));
//# sourceMappingURL=GameMap.js.map
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Engine;
(function (Engine) {
    var Map = (function (_super) {
        __extends(Map, _super);
        function Map(mapConfig) {
            _super.call(this);
            this._layers = [];
            this._ground = [];
            this._ground = mapConfig.data;
            this._tileWidth = mapConfig.width;
            this._tileHeight = mapConfig.height;
            this._tilesetUrl = mapConfig.url;
            Engine.Tileset.load(mapConfig.tilesets, function () {
            });
            var self = this;
            Engine.Tileset.onReady(this._tilesetUrl, function (tileset) {
                self._draw();
            });
        }
        Map.prototype._draw = function () {
            var tileset = Engine.Tileset.getTileset(this._tilesetUrl), tileCounter = 0;
            for (var y = 0; y < this._tileHeight; y++) {
                for (var x = 0; x < this._tileWidth; x++) {
                    this.addChild(new Engine.Tile(tileset.getTile(this._ground[tileCounter]), x, y));
                    tileCounter++;
                }
            }
        };
        return Map;
    })(PIXI.DisplayObjectContainer);
    Engine.Map = Map;
})(Engine || (Engine = {}));
//# sourceMappingURL=Map.js.map
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Engine;
(function (Engine) {
    var Scene = (function (_super) {
        __extends(Scene, _super);
        function Scene(color) {
            _super.call(this, color || 0xffffff);
            this._started = false;
            this._paused = false;
        }
        Scene.prototype.beforeResume = function () {
            if (!this._started) {
                this.onStart();
                this._started = true;
            }
        };
        Scene.prototype.onStart = function () {
        };
        Scene.prototype.update = function () {
        };
        Scene.prototype.pause = function () {
            this._paused = true;
        };
        Scene.prototype.resume = function () {
            this._paused = false;
            this.beforeResume();
        };
        Scene.prototype.isPaused = function () {
            return this._paused;
        };
        return Scene;
    })(PIXI.Stage);
    Engine.Scene = Scene;
})(Engine || (Engine = {}));
//# sourceMappingURL=Scene.js.map
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Engine;
(function (Engine) {
    var GameScene = (function (_super) {
        __extends(GameScene, _super);
        function GameScene() {
            _super.call(this);
            this._gameMapContainer = Engine.GameMap;
            this.addChild(this._gameMapContainer);
        }
        GameScene.prototype.onStart = function () {
            _super.prototype.onStart.call(this);
            Engine.Config.calculateOffset();
            var mapWidth = 10, mapHeight = 10;
            var generatedMap = {
                data: Engine.Utils.generateMap(mapWidth, mapHeight, 0, 10),
                url: 'assets/images/ayolan-tilesetIsometrique.png',
                width: mapWidth,
                height: mapHeight
            };
            Engine.GameMap.loadMap(generatedMap);
            this._gameMapContainer.alpha = 0;
        };
        GameScene.prototype.update = function () {
            stats.begin();
            if (this._gameMapContainer.alpha < 1) {
                this._gameMapContainer.alpha += 0.01;
            }
            _super.prototype.update.call(this);
            stats.end();
        };
        return GameScene;
    })(Engine.Scene);
    Engine.GameScene = GameScene;
})(Engine || (Engine = {}));
//# sourceMappingURL=GameScene.js.map
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Engine;
(function (Engine) {
    var IntroScene = (function (_super) {
        __extends(IntroScene, _super);
        function IntroScene() {
            _super.call(this);
            this._out = false;
            this._logo = PIXI.Sprite.fromImage("assets/images/logo.png");
            this.addChild(this._logo);
            this._logo.scale.x = this._logo.scale.y = Engine.SceneManager.defaultWidth / (Engine.SceneManager.defaultWidth / 2);
            this._logo.anchor.x = this._logo.anchor.y = 0.5;
            this._logo.alpha = 0;
            this._logo.position.x = Engine.SceneManager.defaultWidth / 2;
            this._logo.position.y = Engine.SceneManager.defaultHeight / 2;
        }
        IntroScene.prototype.update = function () {
            _super.prototype.update.call(this);
            if (!this._out) {
                if (this._logo.alpha < 1) {
                    this._logo.alpha += 0.01;
                }
                else {
                    this._out = true;
                }
            }
            else {
                if (this._logo.alpha > 0) {
                    this._logo.alpha -= 0.01;
                }
                else {
                    Engine.SceneManager.goToScene('game');
                }
            }
        };
        return IntroScene;
    })(Engine.Scene);
    Engine.IntroScene = IntroScene;
})(Engine || (Engine = {}));
//# sourceMappingURL=IntroScene.js.map
var Engine;
(function (Engine) {
    var SceneManager = (function () {
        function SceneManager() {
        }
        SceneManager.create = function (width, height, rendererOptions, divId) {
            if (SceneManager.renderer) {
                return SceneManager;
            }
            SceneManager.defaultWidth = SceneManager.width = width;
            SceneManager.defaultHeight = SceneManager.height = height;
            SceneManager.renderer = PIXI.autoDetectRenderer(SceneManager.width, SceneManager.height, rendererOptions);
            if (divId) {
                document.getElementById(divId).appendChild(SceneManager.renderer.view);
            }
            else {
                document.body.appendChild(SceneManager.renderer.view);
            }
            requestAnimFrame(SceneManager.loop);
            return this;
        };
        SceneManager.loop = function () {
            requestAnimFrame(function () {
                SceneManager.loop();
            });
            if (!this.currentScene || this.currentScene.isPaused())
                return;
            this.currentScene.update();
            this.renderer.render(this.currentScene);
        };
        SceneManager.createScene = function (id, CScene) {
            if (SceneManager._scenes[id]) {
                return void 0;
            }
            SceneManager._scenes[id] = new CScene();
            return SceneManager._scenes[id];
        };
        SceneManager.goToScene = function (id) {
            if (SceneManager._scenes[id]) {
                if (SceneManager.currentScene) {
                    SceneManager.currentScene.pause();
                }
                SceneManager.currentScene = SceneManager._scenes[id];
                SceneManager.currentScene.resume();
                return true;
            }
            return false;
        };
        SceneManager._scenes = {};
        return SceneManager;
    })();
    Engine.SceneManager = SceneManager;
})(Engine || (Engine = {}));
//# sourceMappingURL=SceneManager.js.map
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Engine;
(function (Engine) {
    var Tile = (function (_super) {
        __extends(Tile, _super);
        function Tile(texture, isoX, isoY) {
            _super.call(this, texture);
            this.position.x += (isoX - isoY) * (Engine.Config.tileWidth / 2) + Engine.Config.offsetX;
            this.position.y += (isoX + isoY) * (Engine.Config.tileHeight / 2) + Engine.Config.offsetY;
            this._setInteractivity(true);
        }
        Tile.prototype._setInteractivity = function (interactive) {
            if (interactive) {
                this.interactive = true;
                this.hitArea = new PIXI.Polygon([
                    new PIXI.Point(50, 25),
                    new PIXI.Point(100, 50),
                    new PIXI.Point(50, 50 + 25),
                    new PIXI.Point(0, 50)
                ]);
                this.mouseover = this.touchstart = function (data) {
                    this.tint = 0x178c77;
                };
                this.mouseout = this.touchend = function (data) {
                    this.tint = 0xffffff;
                };
            }
            else {
                this.interactive = false;
            }
        };
        return Tile;
    })(PIXI.Sprite);
    Engine.Tile = Tile;
})(Engine || (Engine = {}));
//# sourceMappingURL=Tile.js.map
var Engine;
(function (Engine) {
    var Tileset = (function () {
        function Tileset() {
        }
        Tileset.getTileset = function (tilesetUrl) {
            if (this._tilesetList[tilesetUrl]) {
                if (this._tilesetList[tilesetUrl].isReady()) {
                    return this._tilesetList[tilesetUrl];
                }
                else {
                    throw ('Tileset is not ready : ' + tilesetUrl);
                }
            }
            else {
                throw ('Unknown Tileset : ' + tilesetUrl);
            }
        };
        Tileset.load = function (tilesetList, cb) {
            if (tilesetList.length > 0) {
                if (cb) {
                    this.onAllTilesetsLoaded = cb;
                }
                this._tilesetCounter = tilesetList.length;
                for (var i = 0, ls = tilesetList.length; i < ls; i++) {
                    if (!this._tilesetList[tilesetList[i]]) {
                        this._tilesetList[tilesetList[i]] = new Engine.TilesetLoader(tilesetList[i]);
                    }
                }
            }
        };
        Tileset.onAllTilesetsLoaded = function (cb) {
            if (cb) {
                this.onAllTilesetsLoaded = cb;
            }
        };
        Tileset.onReady = function (tilesetUrl, cb) {
            if (this._tilesetList[tilesetUrl]) {
                this._tilesetList[tilesetUrl].onReady(cb);
            }
            else {
                throw ('Unknown Tileset : ' + tilesetUrl);
            }
        };
        Tileset._tilesetList = {};
        Tileset._tilesetCounter = 0;
        return Tileset;
    })();
    Engine.Tileset = Tileset;
})(Engine || (Engine = {}));
//# sourceMappingURL=Tileset.js.map
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Engine;
(function (Engine) {
    var TilesetLoader = (function (_super) {
        __extends(TilesetLoader, _super);
        function TilesetLoader(tilesetUrl) {
            _super.call(this, tilesetUrl, true);
            this._onReadyCb = [];
            this._ready = false;
            this._tileList = [];
            var self = this;
            this.on('loaded', function () {
                self._cutTiles();
            });
            this.load();
        }
        TilesetLoader.prototype._cutTiles = function () {
            for (var i = 0, textureHeight = Math.floor(this.texture.height / Engine.Config.tileTextureHeight); i < textureHeight; i++) {
                for (var j = 0, textureWidth = Math.floor(this.texture.width / Engine.Config.tileTextureWidth); j < textureWidth; j++) {
                    var tilePosition = new PIXI.Rectangle(j * Engine.Config.tileTextureWidth, i * Engine.Config.tileTextureHeight, Engine.Config.tileTextureWidth, Engine.Config.tileTextureHeight);
                    var tTile = new PIXI.Texture(this.texture.baseTexture, tilePosition);
                    this._tileList.push(tTile);
                }
            }
            this._ready = true;
            for (var i = 0, ls = this._onReadyCb.length; i < ls; i++) {
                this._onReadyCb[i](this);
            }
        };
        TilesetLoader.prototype.getTile = function (tileNumber) {
            if (tileNumber > -1 && tileNumber < this._tileList.length) {
                return this._tileList[tileNumber];
            }
            else {
                console.warn('Vous essayer d\'utiliser un num�ro de Tile inexistant : ' + tileNumber);
                return this._tileList[0];
            }
        };
        TilesetLoader.prototype.isReady = function () {
            return this._ready;
        };
        TilesetLoader.prototype.onReady = function (cb) {
            if (this._ready) {
                cb(this);
            }
            else {
                this._onReadyCb.push(cb);
            }
        };
        return TilesetLoader;
    })(PIXI.ImageLoader);
    Engine.TilesetLoader = TilesetLoader;
})(Engine || (Engine = {}));
//# sourceMappingURL=TilesetLoader.js.map
var Engine;
(function (Engine) {
    var Utils = (function () {
        function Utils() {
        }
        Utils.generateMap = function (width, height, tileNumberMin, tileNumberMax) {
            var out = [];
            for (var i = 0, mapLength = width * height; i < mapLength; i++) {
                out.push(Math.floor((Math.random() * tileNumberMax) + tileNumberMin));
            }
            return out;
        };
        return Utils;
    })();
    Engine.Utils = Utils;
})(Engine || (Engine = {}));
//# sourceMappingURL=Utils.js.map
var stats = new Stats();
stats.setMode(1); // 0: fps, 1: ms

// align top-left
stats.domElement.style.position = 'absolute';
stats.domElement.style.left = '0px';
stats.domElement.style.top = '0px';

document.body.appendChild( stats.domElement );

// Cr�ation du rendu
Engine.SceneManager.create(Engine.Config.gameScreenX, Engine.Config.gameScreenY, {
    antialiasing:false,
    transparent:true,
    resolution:1
}, 'showExample');

// Cr�ation des diff�rentes Sc�nes du "jeu"
Engine.SceneManager.createScene('game', Engine.GameScene);
Engine.SceneManager.createScene('intro', Engine.IntroScene);

// On entre dans la Sc�ne d'introduction
Engine.SceneManager.goToScene('intro');